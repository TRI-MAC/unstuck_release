window.habitlab_content_script = true;

(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[24],{

/***/ "./src/components/habitlab-interstitial-screen-choose-difficulty-v5.deps.js":
/*!*************************************************************************!*\
  !*** ./src/components/habitlab-interstitial-screen-choose-difficulty-v5.deps.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// this file was generated by scripts/generate_polymer_dependencies
// do not edit this file directly
// instead, edit the corresponding .html file and re-run the script
const {import_dom_modules} = __webpack_require__(/*! libs_frontend/dom_utils */ "./src/libs_frontend/dom_utils.ls")
__webpack_require__(/*! bower_components/polymer/polymer.deps.js */ "./src/bower_components/polymer/polymer.deps.js")
__webpack_require__(/*! bower_components/habitlab-paper-button/habitlab-paper-button.deps.js */ "./src/bower_components/habitlab-paper-button/habitlab-paper-button.deps.js")
__webpack_require__(/*! bower_components/habitlab-paper-toast/habitlab-paper-toast.deps.js */ "./src/bower_components/habitlab-paper-toast/habitlab-paper-toast.deps.js")
import_dom_modules(__webpack_require__(/*! components/habitlab-interstitial-screen-choose-difficulty-v5.html */ "./src/components/habitlab-interstitial-screen-choose-difficulty-v5.html"), 'components/habitlab-interstitial-screen-choose-difficulty-v5.html')
__webpack_require__(/*! components/habitlab-interstitial-screen-choose-difficulty-v5 */ "./src/components/habitlab-interstitial-screen-choose-difficulty-v5.js")


/***/ }),

/***/ "./src/components/habitlab-interstitial-screen-choose-difficulty-v5.html":
/*!**********************************************************************!*\
  !*** ./src/components/habitlab-interstitial-screen-choose-difficulty-v5.html ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<link rel=import href=../bower_components/polymer/polymer.html> <link rel=import href=../bower_components/habitlab-paper-button/habitlab-paper-button.html> <link rel=import href=../bower_components/habitlab-paper-toast/habitlab-paper-toast.html> <habitlab-dom-module id=habitlab-interstitial-screen-choose-difficulty-v5> <template> <style>:host{--call-to-action-button-height:38px;--call-to-action-button-padding:5px;--call-to-action-button-margin:0px 0px 10px 0px}.contentContainer{margin-top:20x}.titleText{font-size:1.5em;text-align:center}#messagetext{font-size:1.3em;text-align:center}.whiteDiv{position:fixed;display:flex;flex-direction:column;text-align:center;top:0;left:0;width:100%;height:100%;background-color:#f2fcff;opacity:1;z-index:35000000}#block_container{text-align:center}#secondpart{text-align:center}.difficultybutton{cursor:pointer;padding:5px;background-color:#415d67;color:#fff;font-size:14px;box-shadow:2px 2px 2px #888;width:100%}.buttoncontainer{width:100%;text-align:center;padding:10px}.buttontop{font-size:30px;text-transform:none}.buttonbottom{font-size:14px}#secondpart{display:none}</style> <habitlab-paper-toast id=sample_toast text=\"\" duration=0 vertical-align=top horizontal-align=right> <div id=block_container style=width:530px> <div style=width:100%;font-size:30px> How aggressive would you like HabitLab to be in helping you reduce your time online? </div> <br><br> <div> <div style=text-align:left;display:inline-block> <habitlab-paper-button on-click=difficulty_chosen class=difficultybutton difficulty=nothing> <div class=buttoncontainer difficulty=nothing> <div class=buttontop difficulty=nothing>Don't do anything</div> <br difficulty=nothing> <div class=buttonbottom difficulty=nothing>just track time</div> </div> </habitlab-paper-button> <br><br> <habitlab-paper-button on-click=difficulty_chosen class=difficultybutton difficulty=easy> <div class=buttoncontainer difficulty=easy> <div class=buttontop difficulty=easy>Light touch</div> <br difficulty=easy> <div class=buttonbottom difficulty=easy>e.g., show a timer when you visit Facebook</div> </div> </habitlab-paper-button> <br><br> <habitlab-paper-button on-click=difficulty_chosen class=difficultybutton difficulty=medium> <div class=buttoncontainer difficulty=medium> <div class=buttontop difficulty=medium>Medium</div> <br difficulty=medium> <div class=buttonbottom difficulty=medium>e.g., remove your Facebook feed until you click to show it</div> </div> </habitlab-paper-button> <br><br> <habitlab-paper-button on-click=difficulty_chosen class=difficultybutton difficulty=hard> <div class=buttoncontainer difficulty=hard> <div class=buttontop difficulty=hard>Heavy handed</div> <br difficulty=hard> <div class=buttonbottom difficulty=hard>e.g., close the site after 60 seconds</div> </div> </habitlab-paper-button> <br><br> <template is=habitlab-dom-if if={{have_counter}}> <div style=text-align:center;font-size:30px;margin-top:10px>If you don't choose, an option will be randomly chosen in {{seconds_remaining}} seconds</div> </template> </div> </div> </div> <div id=secondpart style=width:530px> <div style=width:100%;font-size:30px>Ask me again about difficulty:</div> <br><br> <div> <div style=text-align:left;display:inline-block> <habitlab-paper-button on-click=asknext_chosen class=difficultybutton asknext=nextvisit> <div class=buttoncontainer asknext=nextvisit> <div class=buttontop asknext=nextvisit>Next visit</div> </div> </habitlab-paper-button> <br><br> <habitlab-paper-button on-click=asknext_chosen class=difficultybutton asknext=hour> <div class=buttoncontainer asknext=hour> <div class=buttontop asknext=hour>1 hour later</div> </div> </habitlab-paper-button> <br><br> <habitlab-paper-button on-click=asknext_chosen class=difficultybutton asknext=day> <div class=buttoncontainer asknext=day> <div class=buttontop asknext=day>1 day later</div> </div> </habitlab-paper-button> <br><br> <habitlab-paper-button on-click=asknext_chosen class=difficultybutton asknext=week> <div class=buttoncontainer asknext=week> <div class=buttontop asknext=week>1 week later</div> </div> </habitlab-paper-button> <br><br> </div> </div> </div> </habitlab-paper-toast> </template> <script src=habitlab-interstitial-screen-choose-difficulty-v5.js></script> </habitlab-dom-module> ";

/***/ }),

/***/ "./src/components/habitlab-interstitial-screen-choose-difficulty-v5.js":
/*!********************************************************************!*\
  !*** ./src/components/habitlab-interstitial-screen-choose-difficulty-v5.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Polymer({
  is: 'habitlab-interstitial-screen-choose-difficulty-v5',
  doc: 'A screen that asks users to choose the difficulty of intervention they want this visit.',
  properties: {
    seconds_remaining: {
      type: Boolean,
      value: 10,
    },
    have_counter: {
      type: Boolean,
      value: false,
      observer: 'have_counter_changed',
    },
    asknext_strategy: {
      type: String,
      value: '',
    },
    counter_started: {
      type: Boolean,
      value: false,
    },
    difficulty_chosen_before_asknext: {
      type: String,
      value: '',
    },
    difficulty_already_chosen: {
      type: Boolean,
      value: false,
    },
  },
  ready: function() {
    let self = this
    this.$$('#sample_toast').show()
    /*
    let interval = setInterval(function() {
      if (self.seconds_remaining <= 0) {
        return
      }
      self.seconds_remaining -= 1
      if (self.seconds_remaining == 0) {
        clearInterval(interval)
        self.choose_random()
      }
    }, 1000)
    */
  },
  have_counter_changed: function(have_counter) {
    let self = this
    if (have_counter && this.counter_started == false) {
      this.counter_started = true
      let interval = setInterval(function() {
        if (self.difficulty_already_chosen) {
          clearInterval(interval)
          return
        }
        if (self.seconds_remaining <= 0) {
          return
        }
        self.seconds_remaining -= 1
        if (self.seconds_remaining == 0) {
          clearInterval(interval)
          if (!self.difficulty_already_chosen) {
            self.choose_random()
          }
        }
      }, 1000)
    }
  },
  difficulty_chosen: function(evt) {
    /*
    let difficulty = evt.target.getAttribute('difficulty')
    this.fire('difficulty_chosen', {difficulty: difficulty, is_random: false})
    this.$$('#sample_toast').hide()
    */
    this.difficulty_already_chosen = true
    let difficulty = evt.target.getAttribute('difficulty')
    let have_counter = this.have_counter
    let asknext_strategy = this.asknext_strategy
    if (asknext_strategy == 'survey') {
      this.$$('#block_container').style.display = 'none'
      this.$$('#secondpart').style.display = 'block'
      this.difficulty_chosen_before_asknext = difficulty
    } else {
      this.$$('#sample_toast').hide()
      if (asknext_strategy == 'day') {
        this.fire('asknext_auto', {
          difficulty: difficulty,
          is_random: false,
          have_counter: have_counter,
          asknext: 'day',
          asknext_strategy: asknext_strategy,
          asknext_time: Date.now() + 24*3600*1000,
        })
      } else if (asknext_strategy == 'nextvisit') {
        this.fire('asknext_auto', {
          difficulty: difficulty,
          is_random: false,
          have_counter: have_counter,
          asknext: 'nextvisit',
          asknext_strategy: asknext_strategy,
          asknext_time: Date.now(),
        })
      }
    }
    this.fire('difficulty_chosen', {
      difficulty: difficulty,
      is_random: false,
      have_counter: have_counter,
      asknext_strategy: asknext_strategy,
    })
  },
  asknext_chosen: function(evt) {
    let difficulty = this.difficulty_chosen_before_asknext
    let have_counter = this.have_counter
    let asknext = evt.target.getAttribute('asknext')
    let asknext_strategy = this.asknext_strategy
    let curtime = Date.now()
    let asknext_time = curtime
    if (asknext_time == 'nextvisit') {
      asknext_time = curtime
    }
    if (asknext == 'hour') {
      asknext_time = curtime + 3600*1000
    } else if (asknext == 'day') {
      asknext_time = curtime + 24*3600*1000
    } else if (asknext == 'week') {
      asknext_time = curtime + 7*24*3600*1000
    }
    this.fire('asknext_chosen', {
      difficulty: difficulty,
      is_random: false,
      have_counter: have_counter,
      asknext: asknext,
      asknext_strategy: asknext_strategy,
      asknext_time: asknext_time,
    })
    this.$$('#sample_toast').hide()
  },
  choose_random: function(evt) {
    if (this.difficulty_already_chosen) {
      return
    }
    this.difficulty_already_chosen = true
    let difficulty_options = ['nothing', 'easy', 'medium', 'hard']
    let difficulty = difficulty_options[Math.floor(difficulty_options.length * Math.random())]
    let have_counter = this.have_counter
    let asknext_strategy = this.asknext_strategy
    this.fire('difficulty_chosen', {
      difficulty: difficulty,
      is_random: true,
      have_counter: have_counter,
      asknext_strategy: asknext_strategy,
    })
    this.$$('#sample_toast').hide()
  }
});



/***/ }),

/***/ "./src/generated_libs/libs_frontend/intervention_session_vars_backend.js":
/*!*******************************************************************************!*\
  !*** ./src/generated_libs/libs_frontend/intervention_session_vars_backend.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// This file is generated from libs_common/function_signatures.ls
// Do not edit this file directly. To regenerate, run gulp
const {import_lib} = __webpack_require__(/*! libs_frontend/import_lib */ "./src/libs_frontend/import_lib.ls");
module.exports = import_lib('intervention_session_vars_backend');


/***/ }),

/***/ "./src/libs_frontend/intervention_loader.js":
/*!**************************************************!*\
  !*** ./src/libs_frontend/intervention_loader.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function send_message_to_background(type, data) {
  return new Promise(function(resolve, reject) {
    chrome.runtime.sendMessage({
      type,
      data
    }, function(result) {
      resolve(result)
      return true
    })
  })
}

const {
  get_tab_id,
  get_session_id,
  get_is_new_session,
} = __webpack_require__(/*! libs_common/intervention_info */ "./src/libs_common/intervention_info.ls")

function load_intervention_by_name(intervention_name) {
  console.log('load_intervention_by_name sending message')
  let tab_id = get_tab_id();
  let session_id = get_session_id();
  let is_new_session = get_is_new_session();
  let domain = window.location.host
  //send_message_to_background('print_message', {foo: 'bar'})
  send_message_to_background('load_intervention', {domain: domain, tabId: tab_id, intervention_name: intervention_name, session_id: session_id, is_new_session: is_new_session})
}

// function load_intervention_by_difficulty_for_goal(difficulty, goal) {
//   console.log('load_intervention_by_difficulty sending message')
//   let tab_id = get_tab_id()
//   send_message_to_background('load_intervention_by_difficulty_for_goal', {tabId: tab_id, difficulty: difficulty, goal: goal})
// }

module.exports = {
  load_intervention_by_name
}


/***/ }),

/***/ "./src/libs_frontend/intervention_session_vars.js":
/*!********************************************************!*\
  !*** ./src/libs_frontend/intervention_session_vars.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const {
  get_intervention_session_var_backend,
  set_intervention_session_var_backend,
} = __webpack_require__(/*! libs_common/intervention_session_vars_backend */ "./src/generated_libs/libs_frontend/intervention_session_vars_backend.js")

const {
  get_intervention,
  get_session_id,
} = __webpack_require__(/*! libs_common/intervention_info */ "./src/libs_common/intervention_info.ls")

async function get_intervention_session_var(key) {
  const intervention_name = get_intervention().name
  const session_id = get_session_id()
  return await get_intervention_session_var_backend(intervention_name, session_id, key);
}

async function set_intervention_session_var(key, val) {
  const intervention_name = get_intervention().name
  const session_id = get_session_id()
  return await set_intervention_session_var_backend(intervention_name, session_id, key, val);
}

module.exports = {
  get_intervention_session_var,
  set_intervention_session_var,
}


/***/ }),

/***/ "./src/libs_frontend/polymer_utils.ls":
/*!********************************************!*\
  !*** ./src/libs_frontend/polymer_utils.ls ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var gexport, $, import_dom_modules, PropertyIntrospectionBehavior, polymer_ext_registered_tags, polymer_ext_tag_to_info, list_polymer_ext_tags, list_polymer_ext_tags_with_info, process_extra_methods_sources, PolymerWithPropertyIntrospection, polymer_ext, out$ =  true && exports || this;
gexport = __webpack_require__(/*! libs_common/gexport */ "./src/libs_common/gexport.ls").gexport;
$ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
import_dom_modules = __webpack_require__(/*! libs_frontend/dom_utils */ "./src/libs_frontend/dom_utils.ls").import_dom_modules;
__webpack_require__(/*! bower_components/polymer/polymer.deps */ "./src/bower_components/polymer/polymer.deps.js");
PropertyIntrospectionBehavior = {
  properties: {
    propertieslist: {
      type: Array,
      value: []
    }
  },
  getdata: function(){
    var output, i$, ref$, len$, x;
    output = {};
    for (i$ = 0, len$ = (ref$ = this.propertieslist).length; i$ < len$; ++i$) {
      x = ref$[i$];
      output[x] = this[x];
    }
    return output;
  }
};
polymer_ext_registered_tags = [];
polymer_ext_tag_to_info = {};
out$.list_polymer_ext_tags = list_polymer_ext_tags = function(){
  var x;
  return (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = polymer_ext_registered_tags).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(x);
    }
    return results$;
  }());
};
out$.list_polymer_ext_tags_with_info = list_polymer_ext_tags_with_info = function(){
  var x;
  return (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = polymer_ext_registered_tags).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(polymer_ext_tag_to_info[x]);
    }
    return results$;
  }());
};
process_extra_methods_sources = function(extra_methods_sources){
  var extra_methods, i$, len$, method_source, j$, ref$, len1$, method;
  extra_methods = {};
  if (extra_methods_sources == null) {
    return extra_methods;
  }
  if (extra_methods_sources.source != null && extra_methods_sources.methods != null) {
    /*
    {
      source: require('libs_frontend/polymer_methods'),
      methods: ['S', 'once_available'],
    }
    */
    extra_methods_sources = [extra_methods_sources];
  }
  if (Array.isArray(extra_methods_sources)) {
    /*
    [
      {
        source: require('libs_frontend/polymer_methods'),
        methods: ['S', 'once_available'],
      },
      { source: ..., methods: ... },
    ]
    */
    for (i$ = 0, len$ = extra_methods_sources.length; i$ < len$; ++i$) {
      method_source = extra_methods_sources[i$];
      for (j$ = 0, len1$ = (ref$ = method_source.methods).length; j$ < len1$; ++j$) {
        method = ref$[j$];
        extra_methods[method] = method_source.source[method];
      }
    }
  } else {
    /*
    methods = require('libs_frontend/polymer_methods')
    {
      S: methods.S
      once_available: methods.once_available
    }
    */
    extra_methods = extra_methods_sources;
  }
  return extra_methods;
};
PolymerWithPropertyIntrospection = function(dom_module_text, tag_info, extra_methods_sources){
  var extra_methods, tagname, property_names, behavior, k, v, res$, ref$;
  if (typeof dom_module_text === 'string') {
    if (dom_module_text.indexOf("</habitlab-dom-module>") === -1) {
      dom_module_text = "<habitlab-dom-module>\n" + dom_module_text + "\n</habitlab-dom-module>";
    }
    import_dom_modules(dom_module_text, {
      tagname: tag_info.is
    });
  } else {
    extra_methods_sources = tag_info;
    tag_info = dom_module_text;
  }
  extra_methods = process_extra_methods_sources(extra_methods_sources);
  tag_info = $.extend(true, {}, tag_info);
  tagname = tag_info.is;
  if (tagname == null) {
    console.log('called polymer_ext but missing "is" property');
  }
  if (polymer_ext_tag_to_info[tagname] != null) {
    console.log("polymer_ext_tag_to_info called multiple times for " + tagname);
  }
  property_names = [];
  if (tag_info.behaviors == null) {
    tag_info.behaviors = [];
  }
  behavior = $.extend(true, {}, PropertyIntrospectionBehavior);
  for (k in extra_methods) {
    v = extra_methods[k];
    behavior[k] = v;
  }
  tag_info.behaviors.push(behavior);
  if (tag_info.properties == null) {
    tag_info.properties = {};
  }
  res$ = [];
  for (k in ref$ = tag_info.properties) {
    v = ref$[k];
    res$.push(k);
  }
  property_names = res$;
  if (tag_info.properties.propertieslist == null) {
    tag_info.properties.propertieslist = {
      type: Array,
      value: property_names
    };
  }
  polymer_ext_registered_tags.push(tagname);
  polymer_ext_tag_to_info[tagname] = $.extend(true, {}, tag_info);
  return Polymer(tag_info);
};
out$.polymer_ext = polymer_ext = PolymerWithPropertyIntrospection;
//# sourceMappingURL=polymer_utils.ls.map


/***/ })

}]);
window.habitlab_content_script = true;

(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[22],{

/***/ "./src/components/habitlab-show-timer-banner.deps.js":
/*!**************************************************!*\
  !*** ./src/components/habitlab-show-timer-banner.deps.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// this file was generated by scripts/generate_polymer_dependencies
// do not edit this file directly
// instead, edit the corresponding .html file and re-run the script
const {import_dom_modules} = __webpack_require__(/*! libs_frontend/dom_utils */ "./src/libs_frontend/dom_utils.ls")
__webpack_require__(/*! bower_components/polymer/polymer.deps.js */ "./src/bower_components/polymer/polymer.deps.js")
import_dom_modules(__webpack_require__(/*! components/habitlab-show-timer-banner.html */ "./src/components/habitlab-show-timer-banner.html"), 'components/habitlab-show-timer-banner.html')
__webpack_require__(/*! components/habitlab-show-timer-banner */ "./src/components/habitlab-show-timer-banner.js")


/***/ }),

/***/ "./src/components/habitlab-show-timer-banner.html":
/*!***********************************************!*\
  !*** ./src/components/habitlab-show-timer-banner.html ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<link rel=import href=../bower_components/polymer/polymer.html> <habitlab-dom-module id=habitlab-show-timer-banner> <template> <style>:host{height:20px;font-size:20px;line-height:20px;width:100%;text-align:center;position:fixed;top:0;left:0;pointer-events:none;z-index:9007199254740991}#showtimerbannercontainer{height:20px;font-size:20px;line-height:20px;width:100%;text-align:center;position:fixed;top:0;left:0;pointer-events:none;z-index:9007199254740991}#showtimerbannermessagediv{background-color:#000;color:#fff;display:inline-block;cursor:default;opacity:1;padding:5px;border-bottom-left-radius:5px;border-bottom-right-radius:5px}</style> <div id=showtimerbannercontainer> <div id=showtimerbannermessagediv>You've been on {{sitename_printable}} for {{duration}} today</div> </div> </template> <script src=habitlab-show-timer-banner.js></script> </habitlab-dom-module>";

/***/ }),

/***/ "./src/components/habitlab-show-timer-banner.js":
/*!*********************************************!*\
  !*** ./src/components/habitlab-show-timer-banner.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

const {
  printable_time_spent_long
} = __webpack_require__(/*! libs_common/time_utils */ "./src/libs_common/time_utils.ls")

const {
  get_seconds_spent_on_current_domain_today
} = __webpack_require__(/*! libs_common/time_spent_utils */ "./src/libs_common/time_spent_utils.ls");

const {
  get_intervention
} = __webpack_require__(/*! libs_common/intervention_info */ "./src/libs_common/intervention_info.ls")

Polymer({
  is: 'habitlab-show-timer-banner',
  properties: {
    duration: {
      type: Number,
      value: 0
    },
    sitename_printable: {
      type: String,
      value: (function() {
        let intervention_info = get_intervention()
        if (intervention_info.sitename_printable) {
          return intervention_info.sitename_printable
        }
        return 'this site'
      })()
    }
  },
  ready: function() {
    console.log('habitlab-show-timer-banner ready')
    let self = this
    let is_shown = true
    let update_time = function() {
      get_seconds_spent_on_current_domain_today().then(function(seconds_spent) {
        self.duration = printable_time_spent_long(seconds_spent)
      });
    }
    update_time()
    setInterval(update_time, 1000)
    $(document).mousemove(function(evt) {
      let messagediv_offset = $(self.$.showtimerbannermessagediv).offset()
      let min_x = messagediv_offset.left
      let min_y = 0 // messagediv_offset.top
      let max_x = min_x + $(self.$.showtimerbannermessagediv).width()
      let max_y = min_y + $(self.$.showtimerbannermessagediv).height()
      let x = evt.clientX
      let y = evt.clientY
      let prev_is_shown = is_shown
      if (min_x <= x && x <= max_x && min_y <= y && y <= max_y) {
        is_shown = false
      } else {
        is_shown = true
      }
      if (prev_is_shown != is_shown) {
        if (is_shown) {
          $(self.$.showtimerbannermessagediv).css({
            opacity: 1
          })
        } else {
          $(self.$.showtimerbannermessagediv).css({
            opacity: 0
          })
        }
      }
    })
  }
})

/***/ }),

/***/ "./src/generated_libs/libs_frontend/db_utils.js":
/*!******************************************************!*\
  !*** ./src/generated_libs/libs_frontend/db_utils.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// This file is generated from libs_common/function_signatures.ls
// Do not edit this file directly. To regenerate, run gulp
const {import_lib} = __webpack_require__(/*! libs_frontend/import_lib */ "./src/libs_frontend/import_lib.ls");
module.exports = import_lib('db_utils');


/***/ }),

/***/ "./src/libs_common/domain_utils.ls":
/*!*****************************************!*\
  !*** ./src/libs_common/domain_utils.ls ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ref$, gexport, gexport_module, url_to_domain, domain_to_url, out$ =  true && exports || this;
ref$ = __webpack_require__(/*! libs_common/gexport */ "./src/libs_common/gexport.ls"), gexport = ref$.gexport, gexport_module = ref$.gexport_module;
out$.url_to_domain = url_to_domain = function(url){
  var domain;
  if (url.indexOf("://") > -1) {
    domain = url.split('/')[2];
  } else {
    domain = url.split('/')[0];
  }
  return domain;
};
out$.domain_to_url = domain_to_url = function(domain){
  return "http://" + url_to_domain(domain) + '/';
};
gexport_module('domain_utils', function(it){
  return eval(it);
});
//# sourceMappingURL=domain_utils.ls.map


/***/ }),

/***/ "./src/libs_common/time_spent_utils.ls":
/*!*********************************************!*\
  !*** ./src/libs_common/time_spent_utils.ls ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var moment, prelude, ref$, getkey_dictdict, getdict_for_key_dictdict, getdict_for_key2_dictdict, getCollection, setkey_dict, getkey_dict, url_to_domain, get_days_since_epoch, get_session_id, gexport, gexport_module, get_seconds_spent_on_all_domains_today, get_seconds_spent_on_all_domains_days_before_today, get_seconds_spent_on_domain_all_days, get_seconds_spent_on_domain_days_before_today, get_seconds_spent_on_domain_today, get_minutes_spent_on_domain_today, get_seconds_spent_on_current_domain_today, get_visits_to_domain_today, get_visits_to_domain_days_before_today, get_visits_to_current_domain_today, get_new_session_id_for_domain, get_seconds_spent_on_current_domain_in_session, get_seconds_spent_on_domain_in_session, get_seconds_spent_on_current_domain_in_current_session, out$ =  true && exports || this;
moment = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
prelude = __webpack_require__(/*! prelude-ls */ "./node_modules/prelude-ls/lib/index.js");
ref$ = __webpack_require__(/*! libs_common/db_utils */ "./src/generated_libs/libs_frontend/db_utils.js"), getkey_dictdict = ref$.getkey_dictdict, getdict_for_key_dictdict = ref$.getdict_for_key_dictdict, getdict_for_key2_dictdict = ref$.getdict_for_key2_dictdict, getCollection = ref$.getCollection, setkey_dict = ref$.setkey_dict, getkey_dict = ref$.getkey_dict;
url_to_domain = __webpack_require__(/*! libs_common/domain_utils */ "./src/libs_common/domain_utils.ls").url_to_domain;
get_days_since_epoch = __webpack_require__(/*! libs_common/time_utils */ "./src/libs_common/time_utils.ls").get_days_since_epoch;
get_session_id = __webpack_require__(/*! libs_common/intervention_info */ "./src/libs_common/intervention_info.ls").get_session_id;
ref$ = __webpack_require__(/*! libs_common/gexport */ "./src/libs_common/gexport.ls"), gexport = ref$.gexport, gexport_module = ref$.gexport_module;
out$.get_seconds_spent_on_all_domains_today = get_seconds_spent_on_all_domains_today = async function(){
  return (await getdict_for_key2_dictdict('seconds_on_domain_per_day', get_days_since_epoch()));
};
out$.get_seconds_spent_on_all_domains_days_before_today = get_seconds_spent_on_all_domains_days_before_today = async function(days_ago){
  return (await getdict_for_key2_dictdict('seconds_on_domain_per_day', get_days_since_epoch() - days_ago));
};
out$.get_seconds_spent_on_domain_all_days = get_seconds_spent_on_domain_all_days = async function(domain){
  var results, today_day_num, output, k, v;
  results = (await getdict_for_key_dictdict('seconds_on_domain_per_day', domain));
  today_day_num = get_days_since_epoch();
  output = {};
  for (k in results) {
    v = results[k];
    output[today_day_num - k] = v;
  }
  return output;
};
out$.get_seconds_spent_on_domain_days_before_today = get_seconds_spent_on_domain_days_before_today = async function(domain, days_ago){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('seconds_on_domain_per_day', domain, current_day - days_ago));
  return result != null ? result : 0;
};
out$.get_seconds_spent_on_domain_today = get_seconds_spent_on_domain_today = async function(domain){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('seconds_on_domain_per_day', domain, current_day));
  return result != null ? result : 0;
};
out$.get_minutes_spent_on_domain_today = get_minutes_spent_on_domain_today = async function(domain){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('seconds_on_domain_per_day', domain, current_day));
  if (result != null) {
    return Math.floor(result / 60.0);
  }
  return 0;
};
/**
* Return seconds spent on current domain today
* @return {integer} seconds spent
*/
out$.get_seconds_spent_on_current_domain_today = get_seconds_spent_on_current_domain_today = async function(){
  var current_domain, result;
  current_domain = window.location.host;
  result = (await get_seconds_spent_on_domain_today(current_domain));
  return result != null ? result : 0;
};
/**
* Return visits to the given domain today
* @param {domain} the doain
* @return {integer} seconds spent
*/
out$.get_visits_to_domain_today = get_visits_to_domain_today = async function(domain){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('visits_to_domain_per_day', domain, current_day));
  return result != null ? result : 0;
};
out$.get_visits_to_domain_days_before_today = get_visits_to_domain_days_before_today = async function(domain, days_ago){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('visits_to_domain_per_day', domain, current_day - days_ago));
  return result != null ? result : 0;
};
/**
* Return visits to the given domain today
* @return {integer} seconds spent
*/
out$.get_visits_to_current_domain_today = get_visits_to_current_domain_today = async function(){
  var current_domain, result;
  current_domain = window.location.host;
  result = (await get_visits_to_domain_today(current_domain));
  return result != null ? result : 0;
};
/*
export get_new_session_id_for_domain = (domain) ->>
  collection = await getCollection('seconds_on_domain_per_session')
  all_session_ids_for_domain = await collection.where('key').equals(domain).toArray()
  all_session_ids_for_domain = all_session_ids_for_domain.map (.key2)
  if all_session_ids_for_domain.length == 0
    return 0
  return prelude.maximum(all_session_ids_for_domain) + 1 # this is the day, in epoch time, that the most recent intervention set occurred
*/
out$.get_new_session_id_for_domain = get_new_session_id_for_domain = async function(domain){
  var result;
  result = (await getkey_dict('domain_to_last_session_id', domain));
  if (result == null) {
    (await setkey_dict('domain_to_last_session_id', domain, 0));
    return 0;
  }
  (await setkey_dict('domain_to_last_session_id', domain, result + 1));
  return result + 1;
};
out$.get_seconds_spent_on_current_domain_in_session = get_seconds_spent_on_current_domain_in_session = async function(session_id){
  var current_domain, result;
  current_domain = window.location.host;
  result = (await get_seconds_spent_on_domain_in_session(current_domain, session_id));
  return result != null ? result : 0;
};
out$.get_seconds_spent_on_domain_in_session = get_seconds_spent_on_domain_in_session = async function(domain, session_id){
  var result;
  result = (await getkey_dictdict('seconds_on_domain_per_session', domain, session_id));
  return result != null ? result : 0;
};
/**
* Return seconds spent on current domain this session
* @return {integer} seconds spent
*/
out$.get_seconds_spent_on_current_domain_in_current_session = get_seconds_spent_on_current_domain_in_current_session = async function(){
  var session_id, current_domain, result;
  session_id = get_session_id();
  current_domain = window.location.host;
  result = (await get_seconds_spent_on_domain_in_session(current_domain, session_id));
  return result != null ? result : 0;
};
gexport_module('time_spent_utils', function(it){
  return eval(it);
});
//# sourceMappingURL=time_spent_utils.ls.map


/***/ }),

/***/ "./src/libs_common/time_utils.ls":
/*!***************************************!*\
  !*** ./src/libs_common/time_utils.ls ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var moment, ref$, gexport, gexport_module, get_days_since_epoch, pad_to_two_digits, printable_time_spent_short, printable_time_spent, printable_time_spent_long, out$ =  true && exports || this;
moment = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
ref$ = __webpack_require__(/*! libs_common/gexport */ "./src/libs_common/gexport.ls"), gexport = ref$.gexport, gexport_module = ref$.gexport_module;
out$.get_days_since_epoch = get_days_since_epoch = function(){
  var start_of_epoch;
  start_of_epoch = moment().year(2016).month(0).date(1).hours(0).minutes(0).seconds(0).milliseconds(0);
  return moment().diff(start_of_epoch, 'days');
};
pad_to_two_digits = function(val){
  var output;
  output = val.toString();
  if (output.length === 1) {
    return '0' + output;
  }
  return output;
};
out$.printable_time_spent_short = printable_time_spent_short = function(seconds){
  var minutes;
  if (seconds < 0) {
    return '00:00';
  }
  minutes = Math.floor(seconds / 60);
  seconds = seconds - minutes * 60;
  return minutes + ':' + pad_to_two_digits(seconds);
};
out$.printable_time_spent = printable_time_spent = function(seconds){
  if (seconds < 60) {
    return seconds + ' seconds';
  }
  return moment().add(seconds, 'seconds').fromNow(true);
};
/**
* Return time spent in hours, minutes, seconds format
* @param {Integer} seconds - seconds spent
* @return {String} 
*/
out$.printable_time_spent_long = printable_time_spent_long = function(seconds){
  var hours, remaining_seconds, minutes, output;
  if (seconds < 0) {
    return '0 seconds';
  }
  hours = Math.floor(seconds / 3600);
  remaining_seconds = seconds - hours * 3600;
  minutes = Math.floor(remaining_seconds / 60);
  remaining_seconds = remaining_seconds - minutes * 60;
  output = [];
  if (hours > 0) {
    if (hours === 1) {
      output.push('1 hour');
    } else {
      output.push(hours + ' hours');
    }
  }
  if (minutes > 0 || hours > 0) {
    if (minutes === 1) {
      output.push('1 minute');
    } else {
      output.push(minutes + ' minutes');
    }
  }
  if (remaining_seconds === 1) {
    output.push('1 second');
  } else if (remaining_seconds >= 0) {
    output.push(remaining_seconds + ' seconds');
  }
  return output.join(' ');
};
gexport_module('time_utils', function(it){
  return eval(it);
});
//# sourceMappingURL=time_utils.ls.map


/***/ }),

/***/ "./src/libs_frontend/polymer_utils.ls":
/*!********************************************!*\
  !*** ./src/libs_frontend/polymer_utils.ls ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var gexport, $, import_dom_modules, PropertyIntrospectionBehavior, polymer_ext_registered_tags, polymer_ext_tag_to_info, list_polymer_ext_tags, list_polymer_ext_tags_with_info, process_extra_methods_sources, PolymerWithPropertyIntrospection, polymer_ext, out$ =  true && exports || this;
gexport = __webpack_require__(/*! libs_common/gexport */ "./src/libs_common/gexport.ls").gexport;
$ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
import_dom_modules = __webpack_require__(/*! libs_frontend/dom_utils */ "./src/libs_frontend/dom_utils.ls").import_dom_modules;
__webpack_require__(/*! bower_components/polymer/polymer.deps */ "./src/bower_components/polymer/polymer.deps.js");
PropertyIntrospectionBehavior = {
  properties: {
    propertieslist: {
      type: Array,
      value: []
    }
  },
  getdata: function(){
    var output, i$, ref$, len$, x;
    output = {};
    for (i$ = 0, len$ = (ref$ = this.propertieslist).length; i$ < len$; ++i$) {
      x = ref$[i$];
      output[x] = this[x];
    }
    return output;
  }
};
polymer_ext_registered_tags = [];
polymer_ext_tag_to_info = {};
out$.list_polymer_ext_tags = list_polymer_ext_tags = function(){
  var x;
  return (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = polymer_ext_registered_tags).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(x);
    }
    return results$;
  }());
};
out$.list_polymer_ext_tags_with_info = list_polymer_ext_tags_with_info = function(){
  var x;
  return (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = polymer_ext_registered_tags).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(polymer_ext_tag_to_info[x]);
    }
    return results$;
  }());
};
process_extra_methods_sources = function(extra_methods_sources){
  var extra_methods, i$, len$, method_source, j$, ref$, len1$, method;
  extra_methods = {};
  if (extra_methods_sources == null) {
    return extra_methods;
  }
  if (extra_methods_sources.source != null && extra_methods_sources.methods != null) {
    /*
    {
      source: require('libs_frontend/polymer_methods'),
      methods: ['S', 'once_available'],
    }
    */
    extra_methods_sources = [extra_methods_sources];
  }
  if (Array.isArray(extra_methods_sources)) {
    /*
    [
      {
        source: require('libs_frontend/polymer_methods'),
        methods: ['S', 'once_available'],
      },
      { source: ..., methods: ... },
    ]
    */
    for (i$ = 0, len$ = extra_methods_sources.length; i$ < len$; ++i$) {
      method_source = extra_methods_sources[i$];
      for (j$ = 0, len1$ = (ref$ = method_source.methods).length; j$ < len1$; ++j$) {
        method = ref$[j$];
        extra_methods[method] = method_source.source[method];
      }
    }
  } else {
    /*
    methods = require('libs_frontend/polymer_methods')
    {
      S: methods.S
      once_available: methods.once_available
    }
    */
    extra_methods = extra_methods_sources;
  }
  return extra_methods;
};
PolymerWithPropertyIntrospection = function(dom_module_text, tag_info, extra_methods_sources){
  var extra_methods, tagname, property_names, behavior, k, v, res$, ref$;
  if (typeof dom_module_text === 'string') {
    if (dom_module_text.indexOf("</habitlab-dom-module>") === -1) {
      dom_module_text = "<habitlab-dom-module>\n" + dom_module_text + "\n</habitlab-dom-module>";
    }
    import_dom_modules(dom_module_text, {
      tagname: tag_info.is
    });
  } else {
    extra_methods_sources = tag_info;
    tag_info = dom_module_text;
  }
  extra_methods = process_extra_methods_sources(extra_methods_sources);
  tag_info = $.extend(true, {}, tag_info);
  tagname = tag_info.is;
  if (tagname == null) {
    console.log('called polymer_ext but missing "is" property');
  }
  if (polymer_ext_tag_to_info[tagname] != null) {
    console.log("polymer_ext_tag_to_info called multiple times for " + tagname);
  }
  property_names = [];
  if (tag_info.behaviors == null) {
    tag_info.behaviors = [];
  }
  behavior = $.extend(true, {}, PropertyIntrospectionBehavior);
  for (k in extra_methods) {
    v = extra_methods[k];
    behavior[k] = v;
  }
  tag_info.behaviors.push(behavior);
  if (tag_info.properties == null) {
    tag_info.properties = {};
  }
  res$ = [];
  for (k in ref$ = tag_info.properties) {
    v = ref$[k];
    res$.push(k);
  }
  property_names = res$;
  if (tag_info.properties.propertieslist == null) {
    tag_info.properties.propertieslist = {
      type: Array,
      value: property_names
    };
  }
  polymer_ext_registered_tags.push(tagname);
  polymer_ext_tag_to_info[tagname] = $.extend(true, {}, tag_info);
  return Polymer(tag_info);
};
out$.polymer_ext = polymer_ext = PolymerWithPropertyIntrospection;
//# sourceMappingURL=polymer_utils.ls.map


/***/ })

}]);
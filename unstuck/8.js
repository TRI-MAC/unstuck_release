window.habitlab_content_script = true;

(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[8],{

/***/ "./src/components/call-to-action-button.deps.js":
/*!******************************************************!*\
  !*** ./src/components/call-to-action-button.deps.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// this file was generated by scripts/generate_polymer_dependencies
// do not edit this file directly
// instead, edit the corresponding .html file and re-run the script
const {import_dom_modules} = __webpack_require__(/*! libs_frontend/dom_utils */ "./src/libs_frontend/dom_utils.ls")
__webpack_require__(/*! bower_components/habitlab-paper-button/habitlab-paper-button.deps.js */ "./src/bower_components/habitlab-paper-button/habitlab-paper-button.deps.js")
import_dom_modules(__webpack_require__(/*! components/call-to-action-button.html */ "./src/components/call-to-action-button.html"), 'components/call-to-action-button.html')
__webpack_require__(/*! components/call-to-action-button */ "./src/components/call-to-action-button.js")


/***/ }),

/***/ "./src/components/call-to-action-button.html":
/*!***************************************************!*\
  !*** ./src/components/call-to-action-button.html ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<link rel=import href=../bower_components/habitlab-paper-button/habitlab-paper-button.html> <habitlab-dom-module id=call-to-action-button> <template> <style>:host{display:var(--call-to-action-button-display,inline-block);min-height:var(--call-to-action-button-min-height,38px);width:var(--call-to-action-button-width);margin:var(--call-to-action-button-margin,0 0 0 0)}.call-to-action-button{cursor:pointer;color:var(--call-to-action-button-color,#fff);background-color:var(--call-to-action-button-bg-color,#415d67);margin:0 auto;width:100%;height:100%;box-shadow:var(--call-to-action-button-shadow,2px 2px 2px #888)}</style> <habitlab-paper-button class=call-to-action-button on-click=buttonClicked>{{buttonText}}</habitlab-paper-button> </template> <script src=call-to-action-button.js></script> </habitlab-dom-module>";

/***/ }),

/***/ "./src/components/call-to-action-button.js":
/*!*************************************************!*\
  !*** ./src/components/call-to-action-button.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const {polymer_ext} = __webpack_require__(/*! libs_frontend/polymer_utils */ "./src/libs_frontend/polymer_utils.ls");
const {log_action} = __webpack_require__(/*! libs_frontend/intervention_log_utils */ "./src/libs_frontend/intervention_log_utils.ls")
const {
  get_intervention, 
  get_goal_info
} = __webpack_require__(/*! libs_common/intervention_info */ "./src/libs_common/intervention_info.ls")

const {
  close_tab_with_id
} = __webpack_require__(/*! libs_common/tab_utils */ "./src/generated_libs/libs_frontend/tab_utils.js")

const {
  get_tab_id
} = __webpack_require__ (/*! libs_common/intervention_info */ "./src/libs_common/intervention_info.ls")

polymer_ext({
  is: 'call-to-action-button',
  properties: {
    goal: {
      type: Object
    },
    buttonText: {
      type: String,
      computed: 'computeButtonText(goal)'
    }
  },
  ready: function() {
    this.goal = get_goal_info()
  },
  buttonClicked: function() {
    if (this.goal.is_positive) {
      log_action({'positive': 'habitlab-positive-goal-site-button clicked'})
      var domain = this.goal.domain
      if (domain.search("http") == -1) {
        domain = 'https://' + domain
      }
      window.location.href = domain
    } else {
      log_action({'positive': 'habitlab-close-tab-button clicked'})
      close_tab_with_id(get_tab_id()) 
    }
  },
  computeButtonText: function(goal) {
    if (goal.call_to_action != null) {
      // Should be max 21 characters
      return goal.call_to_action
    } else if (!goal.is_positive) {
      var sitename_printable = get_goal_info().sitename_printable
      return "Close " + sitename_printable
    } else {
      // Positive goal with no call to action text set -> just use its description for now
      return goal.description
    }
  }
});

/***/ }),

/***/ "./src/components/habitlab-video-overlay.deps.js":
/*!**********************************************!*\
  !*** ./src/components/habitlab-video-overlay.deps.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// this file was generated by scripts/generate_polymer_dependencies
// do not edit this file directly
// instead, edit the corresponding .html file and re-run the script
const {import_dom_modules} = __webpack_require__(/*! libs_frontend/dom_utils */ "./src/libs_frontend/dom_utils.ls")
__webpack_require__(/*! bower_components/polymer/polymer.deps.js */ "./src/bower_components/polymer/polymer.deps.js")
__webpack_require__(/*! bower_components/habitlab-paper-button/habitlab-paper-button.deps.js */ "./src/bower_components/habitlab-paper-button/habitlab-paper-button.deps.js")
__webpack_require__(/*! components/habitlab-logo-v2.deps.js */ "./src/components/habitlab-logo-v2.deps.js")
__webpack_require__(/*! components/call-to-action-button.deps.js */ "./src/components/call-to-action-button.deps.js")
import_dom_modules(__webpack_require__(/*! components/habitlab-video-overlay.html */ "./src/components/habitlab-video-overlay.html"), 'components/habitlab-video-overlay.html')
__webpack_require__(/*! components/habitlab-video-overlay */ "./src/components/habitlab-video-overlay.js")


/***/ }),

/***/ "./src/components/habitlab-video-overlay.html":
/*!*******************************************!*\
  !*** ./src/components/habitlab-video-overlay.html ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<link rel=import href=../bower_components/polymer/polymer.html> <link rel=import href=../bower_components/habitlab-paper-button/habitlab-paper-button.html> <link rel=import href=habitlab-logo-v2.html> <link rel=import href=call-to-action-button.html> <habitlab-dom-module id=habitlab-video-overlay> <template> <style>:host{display:flex}#outerdiv{background-color:#1f1f1f;width:100%;height:100%;display:table}#button_container{display:table-cell;vertical-align:middle;text-align:center;font-size:14px}#watch_video_button{background-color:#415d67;color:#fff;-webkit-font-smoothing:antialiased;box-shadow:2px 2px 2px #888;height:38px;margin-left:10px}#msg{font-size:24px;color:#f0f0f0;font-weight:300}</style> <div id=outerdiv> <div id=button_container> <habitlab-logo-v2 id=logo></habitlab-logo-v2> <br><br> <br> <b id=msg> </b> <br> <br><br> <call-to-action-button id=close_button></call-to-action-button> <habitlab-paper-button on-click=watch_button_clicked id=watch_video_button>Watch Video</habitlab-paper-button> </div> </div> </template> <script src=habitlab-video-overlay.js></script> </habitlab-dom-module>";

/***/ }),

/***/ "./src/components/habitlab-video-overlay.js":
/*!*****************************************!*\
  !*** ./src/components/habitlab-video-overlay.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const {
  get_seconds_spent_on_domain_today
} = __webpack_require__(/*! libs_common/time_spent_utils */ "./src/libs_common/time_spent_utils.ls")

const {
  get_intervention,
  get_goal_info,
} = __webpack_require__(/*! libs_common/intervention_info */ "./src/libs_common/intervention_info.ls")

Polymer({
  is: 'habitlab-video-overlay',
  properties: {
    isdemo: {
      type: Boolean,
      observer: 'isdemo_changed'
    },
    domain: {
      type: String,
      value: (function() {
        if (window.location.protocol == 'chrome-extension:')
          return 'www.iqiyi.com'
        else
          return window.location.host
      })()
    },
    sitename_printable: {
      type: String,
      value: get_goal_info().sitename_printable //'Iqiyi'
    }
  },
  watch_button_clicked: function(evt) {
    this.fire('watch_clicked', {})
    console.log('watch button was clicked')
  },
  ready: async function() {
    //console.log('ready was called')
    const secondsSpent = await get_seconds_spent_on_domain_today(this.domain)
    const mins = Math.floor(secondsSpent/60)
    const secs = secondsSpent % 60
    //console.log('getting time spent')
    this.$.msg.innerHTML = "You've spent " + mins + " minutes and " + secs + " seconds on " + this.sitename_printable + " today. <br>Are you sure you want to continue watching videos?"
  },
  isdemo_changed: function(isdemo) {
    console.log('isdemo_changed called')
    console.log(isdemo)
    if (isdemo) {
      this.style.height = '410px';
      this.style.width = '680px';
    }
  }
})


/***/ }),

/***/ "./src/generated_libs/libs_frontend/db_utils.js":
/*!******************************************************!*\
  !*** ./src/generated_libs/libs_frontend/db_utils.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// This file is generated from libs_common/function_signatures.ls
// Do not edit this file directly. To regenerate, run gulp
const {import_lib} = __webpack_require__(/*! libs_frontend/import_lib */ "./src/libs_frontend/import_lib.ls");
module.exports = import_lib('db_utils');


/***/ }),

/***/ "./src/libs_common/domain_utils.ls":
/*!*****************************************!*\
  !*** ./src/libs_common/domain_utils.ls ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ref$, gexport, gexport_module, url_to_domain, domain_to_url, out$ =  true && exports || this;
ref$ = __webpack_require__(/*! libs_common/gexport */ "./src/libs_common/gexport.ls"), gexport = ref$.gexport, gexport_module = ref$.gexport_module;
out$.url_to_domain = url_to_domain = function(url){
  var domain;
  if (url.indexOf("://") > -1) {
    domain = url.split('/')[2];
  } else {
    domain = url.split('/')[0];
  }
  return domain;
};
out$.domain_to_url = domain_to_url = function(domain){
  return "http://" + url_to_domain(domain) + '/';
};
gexport_module('domain_utils', function(it){
  return eval(it);
});
//# sourceMappingURL=domain_utils.ls.map


/***/ }),

/***/ "./src/libs_common/time_spent_utils.ls":
/*!*********************************************!*\
  !*** ./src/libs_common/time_spent_utils.ls ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var moment, prelude, ref$, getkey_dictdict, getdict_for_key_dictdict, getdict_for_key2_dictdict, getCollection, setkey_dict, getkey_dict, url_to_domain, get_days_since_epoch, get_session_id, gexport, gexport_module, get_seconds_spent_on_all_domains_today, get_seconds_spent_on_all_domains_days_before_today, get_seconds_spent_on_domain_all_days, get_seconds_spent_on_domain_days_before_today, get_seconds_spent_on_domain_today, get_minutes_spent_on_domain_today, get_seconds_spent_on_current_domain_today, get_visits_to_domain_today, get_visits_to_domain_days_before_today, get_visits_to_current_domain_today, get_new_session_id_for_domain, get_seconds_spent_on_current_domain_in_session, get_seconds_spent_on_domain_in_session, get_seconds_spent_on_current_domain_in_current_session, out$ =  true && exports || this;
moment = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
prelude = __webpack_require__(/*! prelude-ls */ "./node_modules/prelude-ls/lib/index.js");
ref$ = __webpack_require__(/*! libs_common/db_utils */ "./src/generated_libs/libs_frontend/db_utils.js"), getkey_dictdict = ref$.getkey_dictdict, getdict_for_key_dictdict = ref$.getdict_for_key_dictdict, getdict_for_key2_dictdict = ref$.getdict_for_key2_dictdict, getCollection = ref$.getCollection, setkey_dict = ref$.setkey_dict, getkey_dict = ref$.getkey_dict;
url_to_domain = __webpack_require__(/*! libs_common/domain_utils */ "./src/libs_common/domain_utils.ls").url_to_domain;
get_days_since_epoch = __webpack_require__(/*! libs_common/time_utils */ "./src/libs_common/time_utils.ls").get_days_since_epoch;
get_session_id = __webpack_require__(/*! libs_common/intervention_info */ "./src/libs_common/intervention_info.ls").get_session_id;
ref$ = __webpack_require__(/*! libs_common/gexport */ "./src/libs_common/gexport.ls"), gexport = ref$.gexport, gexport_module = ref$.gexport_module;
out$.get_seconds_spent_on_all_domains_today = get_seconds_spent_on_all_domains_today = async function(){
  return (await getdict_for_key2_dictdict('seconds_on_domain_per_day', get_days_since_epoch()));
};
out$.get_seconds_spent_on_all_domains_days_before_today = get_seconds_spent_on_all_domains_days_before_today = async function(days_ago){
  return (await getdict_for_key2_dictdict('seconds_on_domain_per_day', get_days_since_epoch() - days_ago));
};
out$.get_seconds_spent_on_domain_all_days = get_seconds_spent_on_domain_all_days = async function(domain){
  var results, today_day_num, output, k, v;
  results = (await getdict_for_key_dictdict('seconds_on_domain_per_day', domain));
  today_day_num = get_days_since_epoch();
  output = {};
  for (k in results) {
    v = results[k];
    output[today_day_num - k] = v;
  }
  return output;
};
out$.get_seconds_spent_on_domain_days_before_today = get_seconds_spent_on_domain_days_before_today = async function(domain, days_ago){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('seconds_on_domain_per_day', domain, current_day - days_ago));
  return result != null ? result : 0;
};
out$.get_seconds_spent_on_domain_today = get_seconds_spent_on_domain_today = async function(domain){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('seconds_on_domain_per_day', domain, current_day));
  return result != null ? result : 0;
};
out$.get_minutes_spent_on_domain_today = get_minutes_spent_on_domain_today = async function(domain){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('seconds_on_domain_per_day', domain, current_day));
  if (result != null) {
    return Math.floor(result / 60.0);
  }
  return 0;
};
/**
* Return seconds spent on current domain today
* @return {integer} seconds spent
*/
out$.get_seconds_spent_on_current_domain_today = get_seconds_spent_on_current_domain_today = async function(){
  var current_domain, result;
  current_domain = window.location.host;
  result = (await get_seconds_spent_on_domain_today(current_domain));
  return result != null ? result : 0;
};
/**
* Return visits to the given domain today
* @param {domain} the doain
* @return {integer} seconds spent
*/
out$.get_visits_to_domain_today = get_visits_to_domain_today = async function(domain){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('visits_to_domain_per_day', domain, current_day));
  return result != null ? result : 0;
};
out$.get_visits_to_domain_days_before_today = get_visits_to_domain_days_before_today = async function(domain, days_ago){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('visits_to_domain_per_day', domain, current_day - days_ago));
  return result != null ? result : 0;
};
/**
* Return visits to the given domain today
* @return {integer} seconds spent
*/
out$.get_visits_to_current_domain_today = get_visits_to_current_domain_today = async function(){
  var current_domain, result;
  current_domain = window.location.host;
  result = (await get_visits_to_domain_today(current_domain));
  return result != null ? result : 0;
};
/*
export get_new_session_id_for_domain = (domain) ->>
  collection = await getCollection('seconds_on_domain_per_session')
  all_session_ids_for_domain = await collection.where('key').equals(domain).toArray()
  all_session_ids_for_domain = all_session_ids_for_domain.map (.key2)
  if all_session_ids_for_domain.length == 0
    return 0
  return prelude.maximum(all_session_ids_for_domain) + 1 # this is the day, in epoch time, that the most recent intervention set occurred
*/
out$.get_new_session_id_for_domain = get_new_session_id_for_domain = async function(domain){
  var result;
  result = (await getkey_dict('domain_to_last_session_id', domain));
  if (result == null) {
    (await setkey_dict('domain_to_last_session_id', domain, 0));
    return 0;
  }
  (await setkey_dict('domain_to_last_session_id', domain, result + 1));
  return result + 1;
};
out$.get_seconds_spent_on_current_domain_in_session = get_seconds_spent_on_current_domain_in_session = async function(session_id){
  var current_domain, result;
  current_domain = window.location.host;
  result = (await get_seconds_spent_on_domain_in_session(current_domain, session_id));
  return result != null ? result : 0;
};
out$.get_seconds_spent_on_domain_in_session = get_seconds_spent_on_domain_in_session = async function(domain, session_id){
  var result;
  result = (await getkey_dictdict('seconds_on_domain_per_session', domain, session_id));
  return result != null ? result : 0;
};
/**
* Return seconds spent on current domain this session
* @return {integer} seconds spent
*/
out$.get_seconds_spent_on_current_domain_in_current_session = get_seconds_spent_on_current_domain_in_current_session = async function(){
  var session_id, current_domain, result;
  session_id = get_session_id();
  current_domain = window.location.host;
  result = (await get_seconds_spent_on_domain_in_session(current_domain, session_id));
  return result != null ? result : 0;
};
gexport_module('time_spent_utils', function(it){
  return eval(it);
});
//# sourceMappingURL=time_spent_utils.ls.map


/***/ }),

/***/ "./src/libs_common/time_utils.ls":
/*!***************************************!*\
  !*** ./src/libs_common/time_utils.ls ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var moment, ref$, gexport, gexport_module, get_days_since_epoch, pad_to_two_digits, printable_time_spent_short, printable_time_spent, printable_time_spent_long, out$ =  true && exports || this;
moment = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
ref$ = __webpack_require__(/*! libs_common/gexport */ "./src/libs_common/gexport.ls"), gexport = ref$.gexport, gexport_module = ref$.gexport_module;
out$.get_days_since_epoch = get_days_since_epoch = function(){
  var start_of_epoch;
  start_of_epoch = moment().year(2016).month(0).date(1).hours(0).minutes(0).seconds(0).milliseconds(0);
  return moment().diff(start_of_epoch, 'days');
};
pad_to_two_digits = function(val){
  var output;
  output = val.toString();
  if (output.length === 1) {
    return '0' + output;
  }
  return output;
};
out$.printable_time_spent_short = printable_time_spent_short = function(seconds){
  var minutes;
  if (seconds < 0) {
    return '00:00';
  }
  minutes = Math.floor(seconds / 60);
  seconds = seconds - minutes * 60;
  return minutes + ':' + pad_to_two_digits(seconds);
};
out$.printable_time_spent = printable_time_spent = function(seconds){
  if (seconds < 60) {
    return seconds + ' seconds';
  }
  return moment().add(seconds, 'seconds').fromNow(true);
};
/**
* Return time spent in hours, minutes, seconds format
* @param {Integer} seconds - seconds spent
* @return {String} 
*/
out$.printable_time_spent_long = printable_time_spent_long = function(seconds){
  var hours, remaining_seconds, minutes, output;
  if (seconds < 0) {
    return '0 seconds';
  }
  hours = Math.floor(seconds / 3600);
  remaining_seconds = seconds - hours * 3600;
  minutes = Math.floor(remaining_seconds / 60);
  remaining_seconds = remaining_seconds - minutes * 60;
  output = [];
  if (hours > 0) {
    if (hours === 1) {
      output.push('1 hour');
    } else {
      output.push(hours + ' hours');
    }
  }
  if (minutes > 0 || hours > 0) {
    if (minutes === 1) {
      output.push('1 minute');
    } else {
      output.push(minutes + ' minutes');
    }
  }
  if (remaining_seconds === 1) {
    output.push('1 second');
  } else if (remaining_seconds >= 0) {
    output.push(remaining_seconds + ' seconds');
  }
  return output.join(' ');
};
gexport_module('time_utils', function(it){
  return eval(it);
});
//# sourceMappingURL=time_utils.ls.map


/***/ })

}]);
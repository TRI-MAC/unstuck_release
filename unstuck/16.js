window.habitlab_content_script = true;

(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[16],{

/***/ "./src/components/habitlab-banner-screen-num-visits.deps.js":
/*!*********************************************************!*\
  !*** ./src/components/habitlab-banner-screen-num-visits.deps.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// this file was generated by scripts/generate_polymer_dependencies
// do not edit this file directly
// instead, edit the corresponding .html file and re-run the script
const {import_dom_modules} = __webpack_require__(/*! libs_frontend/dom_utils */ "./src/libs_frontend/dom_utils.ls")
__webpack_require__(/*! bower_components/polymer/polymer.deps.js */ "./src/bower_components/polymer/polymer.deps.js")
__webpack_require__(/*! bower_components/habitlab-paper-button/habitlab-paper-button.deps.js */ "./src/bower_components/habitlab-paper-button/habitlab-paper-button.deps.js")
__webpack_require__(/*! components/habitlab-logo-v2.deps.js */ "./src/components/habitlab-logo-v2.deps.js")
__webpack_require__(/*! components/habitlab-close-tab-button.deps.js */ "./src/components/habitlab-close-tab-button.deps.js")
__webpack_require__(/*! bower_components/polymer-themes/ice.deps.js */ "./src/bower_components/polymer-themes/ice.deps.js")
__webpack_require__(/*! bower_components/habitlab-paper-toast/habitlab-paper-toast.deps.js */ "./src/bower_components/habitlab-paper-toast/habitlab-paper-toast.deps.js")
import_dom_modules(__webpack_require__(/*! components/habitlab-banner-screen-num-visits.html */ "./src/components/habitlab-banner-screen-num-visits.html"), 'components/habitlab-banner-screen-num-visits.html')
__webpack_require__(/*! components/habitlab-banner-screen-num-visits */ "./src/components/habitlab-banner-screen-num-visits.js")


/***/ }),

/***/ "./src/components/habitlab-banner-screen-num-visits.html":
/*!******************************************************!*\
  !*** ./src/components/habitlab-banner-screen-num-visits.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<link rel=import href=../bower_components/polymer/polymer.html> <link rel=import href=../bower_components/habitlab-paper-button/habitlab-paper-button.html> <link rel=import href=habitlab-logo-v2.html> <link rel=import href=habitlab-close-tab-button.html> <link rel=import href=../bower_components/polymer-themes/ice.html> <link rel=import href=../bower_components/habitlab-paper-toast/habitlab-paper-toast.html> <habitlab-dom-module id=habitlab-banner-screen-num-visits> <template> <style>:host{z-index:9007199254740991;text-align:center;width:350px;height:270px;font-family:Verdana,Geneva,Tahoma,HelveticaNeue-Light,\"Helvetica Neue Light\",\"Helvetica Neue\",Helvetica,Arial,\"Lucida Grande\",sans-serif;font-size:7px;--call-to-action-button-height:38px;--call-to-action-button-padding:5px;--call-to-action-button-margin:0px 0px 10px 0px}.contentContainer{margin-top:20x}.titleText{font-size:.75em;text-align:center}#messagetext{font-size:.65em;text-align:center}.whiteDiv{position:fixed;display:flex;flex-direction:column;text-align:center;bottom:0;left:0;width:350px;height:270px;background-color:#f2fcff;opacity:1;z-index:35000000}.okButton{cursor:pointer;padding:5px;background-color:#415d67;color:#fff;font-size:7px;height:38px;box-shadow:2px 2px 2px #888}#logo{margin-top:10px;padding-bottom:10px}.message-block{padding-top:20px;align-self:center}#paperprogress{display:none;margin-bottom:10px}#block_container{text-align:center}#browsing,#min,#sec,#spent,#today,#visits{display:inline}#sample_toast{width:350px;height:280px;z-index:9007199254740991;background-color:#f0f8ff;color:#000}</style> <habitlab-paper-toast id=sample_toast text=\"\" duration=0 vertical-align=top horizontal-align=right opened> <div class=whiteDiv> <div id=block_container style=margin-top:20px> <div id=today class=timer-text style=text-align:left;color:#415d67;font-size:10px;line-height:200%>Today you have spent <b>{{minutes}}</b> minutes on {{sitenamePrintable}}. <br>You have visited it <b>{{visits}}</b> times. </div> </div> <center> <habitlab-logo-v2 id=logo></habitlab-logo-v2> <center> <center> <habitlab-close-tab-button id=calltoactionbutton /> </center> <div class=contentContainer> <center><habitlab-paper-button id=okbutton class=okButton on-click=continueclicked>{{continue_button_text}}</habitlab-paper-button></center> </div> </center> </center> </div> </habitlab-paper-toast> </template> <script src=habitlab-banner-screen-num-visits.js></script> </habitlab-dom-module>";

/***/ }),

/***/ "./src/components/habitlab-banner-screen-num-visits.js":
/*!****************************************************!*\
  !*** ./src/components/habitlab-banner-screen-num-visits.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")

const {polymer_ext} = __webpack_require__(/*! libs_frontend/polymer_utils */ "./src/libs_frontend/polymer_utils.ls")
const {close_selected_tab} = __webpack_require__(/*! libs_frontend/tab_utils */ "./src/generated_libs/libs_frontend/tab_utils.js")

const {
  log_action,
} = __webpack_require__(/*! libs_frontend/intervention_log_utils */ "./src/libs_frontend/intervention_log_utils.ls")

const {
  get_positive_enabled_uncompleted_goals,
} = __webpack_require__(/*! libs_common/goal_utils */ "./src/generated_libs/libs_frontend/goal_utils.js")

Polymer({
  is: 'habitlab-banner-screen-num-visits',
  doc: 'A screen that shows time spent on a site today, number of visits, and links to New York Times articles.',
  properties: {
    sitenamePrintable: {
      type: String,
    },
    btnTxt: {
      type: String, 
    },
    btnTxt2: {
      type: String, 
    },    
    minutes: {
      type: Number
    },
    visits: {
      type: Number
    },
    intervention: {
      type: String
    },
    messageText: {
      type: String
    },
    randomizer: {
      type: Boolean,
      value: Math.floor(Math.random()*2) == 0,
    },
    show_positive_site_trigger: {
      type: Boolean,
      value: false
    },
    show_progress_message: {
      type: Boolean,
      value: false,
      //computed: 'compute_progress_message()',
    },
    show_quote_message: {
      type: Boolean,
      value: true,
    }

  },

  listeners: {
    'disable_intervention': 'disableIntervention',
    'show_button': 'showButton'
  },
  compute_show_rss_message: function(show_positive_site_trigger, show_progress_message, show_quote_message, randomizer) {
    return !show_positive_site_trigger && !show_quote_message && (!show_progress_message) && randomizer
  },
  compute_show_workpages_message: function(show_positive_site_trigger, show_progress_message, show_quote_message, randomizer) {
    return !show_positive_site_trigger && !show_quote_message && !show_progress_message && !randomizer
  },
  //compute_show_progress_message: function() {
  //  return false
  //},
  buttonclicked: function() {
    log_action({'negative': 'Continued to site.'})
    //$(this).hide()
    this.$.sample_toast.hide()
  },
  hideButton: function() {
    this.$.okbutton.hidden = true
    //this.$.calltoactionbutton.hidden = true
    this.$.okbutton.style.display = 'none';
    //this.$.calltoactionbutton.style.display = 'none';
  },
  showButton: function() {
    this.$.okbutton.hidden = false
    //this.$.calltoactionbutton.hidden = false
    this.$.okbutton.style.style.display = 'inline-flex';
    this.$.calltoactionbutton.setProperty('--call-to-action-button-display', 'inline-flex');
  },
  ready: async function() {
    this.$.okbutton.textContent = this.btnTxt
    this.$.calltoactionbutton.text = this.btnTxt2

    this.addEventListener('show_button', function() {
    })
    //this.visits = 5;
    //this.minutes = 8;
    //this.seconds = 9;

  },
  disableIntervention: function() {
    //$(this).hide()
    this.$.sample_toast.hide()
  },
  
  attributeChanged: function() {
    this.$.okbutton.textContent = this.btnTxt 
    this.$.calltoactionbutton.closeTabText = this.btnTxt2
    this.$.messagetext.textContent = this.messageText
  },
  continueclicked: function() {
    log_action({'negative': 'Continued to site.'})
    //$(this).hide()
    this.$.sample_toast.hide()
  }
});



/***/ }),

/***/ "./src/components/habitlab-close-tab-button.deps.js":
/*!*************************************************!*\
  !*** ./src/components/habitlab-close-tab-button.deps.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// this file was generated by scripts/generate_polymer_dependencies
// do not edit this file directly
// instead, edit the corresponding .html file and re-run the script
const {import_dom_modules} = __webpack_require__(/*! libs_frontend/dom_utils */ "./src/libs_frontend/dom_utils.ls")
__webpack_require__(/*! bower_components/habitlab-paper-button/habitlab-paper-button.deps.js */ "./src/bower_components/habitlab-paper-button/habitlab-paper-button.deps.js")
import_dom_modules(__webpack_require__(/*! components/habitlab-close-tab-button.html */ "./src/components/habitlab-close-tab-button.html"), 'components/habitlab-close-tab-button.html')
__webpack_require__(/*! components/habitlab-close-tab-button */ "./src/components/habitlab-close-tab-button.ls")


/***/ }),

/***/ "./src/components/habitlab-close-tab-button.html":
/*!**********************************************!*\
  !*** ./src/components/habitlab-close-tab-button.html ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<link rel=import href=../bower_components/habitlab-paper-button/habitlab-paper-button.html> <habitlab-dom-module id=habitlab-close-tab-button> <template> <style>:host{display:var(--call-to-action-button-display,inline-block);height:var(--call-to-action-button-height,38px);width:var(--call-to-action-button-width);margin:var(--call-to-action-button-margin,0 0 0 0)}.close_tab_button{cursor:pointer;color:var(--call-to-action-button-color,#fff);font-size:var(--call-to-action-button-font-size,14px);background-color:var(--call-to-action-button-bg-color,#415d67);margin:0 auto;width:100%;height:100%;box-shadow:var(--call-to-action-button-shadow,2px 2px 2px #888)}</style> <habitlab-paper-button class=close_tab_button on-click=button_clicked>{{buttontext}}</habitlab-paper-button> </template> <script src=habitlab-close-tab-button.js></script> </habitlab-dom-module>";

/***/ }),

/***/ "./src/components/habitlab-close-tab-button.ls":
/*!********************************************!*\
  !*** ./src/components/habitlab-close-tab-button.ls ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var close_selected_tab, log_action, get_tab_id, close_tab_with_id, msg;
close_selected_tab = __webpack_require__(/*! libs_common/tab_utils */ "./src/generated_libs/libs_frontend/tab_utils.js").close_selected_tab;
log_action = __webpack_require__(/*! libs_frontend/intervention_log_utils */ "./src/libs_frontend/intervention_log_utils.ls").log_action;
get_tab_id = __webpack_require__(/*! libs_common/intervention_info */ "./src/libs_common/intervention_info.ls").get_tab_id;
close_tab_with_id = __webpack_require__(/*! libs_common/tab_utils */ "./src/generated_libs/libs_frontend/tab_utils.js").close_tab_with_id;
msg = __webpack_require__(/*! libs_common/localization_utils */ "./src/libs_common/localization_utils.js").msg;
Polymer({
  is: 'habitlab-close-tab-button',
  doc: 'A button that closes the current tab',
  properties: {
    buttontext: {
      type: String,
      value: msg('Close Tab')
    }
  },
  button_clicked: async function(){
    (await log_action({
      'positive': 'habitlab-close-tab-button clicked'
    }));
    return close_tab_with_id(get_tab_id());
  }
});
//# sourceMappingURL=habitlab-close-tab-button.ls.map


/***/ }),

/***/ "./src/generated_libs/libs_frontend/db_utils.js":
/*!******************************************************!*\
  !*** ./src/generated_libs/libs_frontend/db_utils.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// This file is generated from libs_common/function_signatures.ls
// Do not edit this file directly. To regenerate, run gulp
const {import_lib} = __webpack_require__(/*! libs_frontend/import_lib */ "./src/libs_frontend/import_lib.ls");
module.exports = import_lib('db_utils');


/***/ }),

/***/ "./src/libs_common/domain_utils.ls":
/*!*****************************************!*\
  !*** ./src/libs_common/domain_utils.ls ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ref$, gexport, gexport_module, url_to_domain, domain_to_url, out$ =  true && exports || this;
ref$ = __webpack_require__(/*! libs_common/gexport */ "./src/libs_common/gexport.ls"), gexport = ref$.gexport, gexport_module = ref$.gexport_module;
out$.url_to_domain = url_to_domain = function(url){
  var domain;
  if (url.indexOf("://") > -1) {
    domain = url.split('/')[2];
  } else {
    domain = url.split('/')[0];
  }
  return domain;
};
out$.domain_to_url = domain_to_url = function(domain){
  return "http://" + url_to_domain(domain) + '/';
};
gexport_module('domain_utils', function(it){
  return eval(it);
});
//# sourceMappingURL=domain_utils.ls.map


/***/ }),

/***/ "./src/libs_common/time_spent_utils.ls":
/*!*********************************************!*\
  !*** ./src/libs_common/time_spent_utils.ls ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var moment, prelude, ref$, getkey_dictdict, getdict_for_key_dictdict, getdict_for_key2_dictdict, getCollection, setkey_dict, getkey_dict, url_to_domain, get_days_since_epoch, get_session_id, gexport, gexport_module, get_seconds_spent_on_all_domains_today, get_seconds_spent_on_all_domains_days_before_today, get_seconds_spent_on_domain_all_days, get_seconds_spent_on_domain_days_before_today, get_seconds_spent_on_domain_today, get_minutes_spent_on_domain_today, get_seconds_spent_on_current_domain_today, get_visits_to_domain_today, get_visits_to_domain_days_before_today, get_visits_to_current_domain_today, get_new_session_id_for_domain, get_seconds_spent_on_current_domain_in_session, get_seconds_spent_on_domain_in_session, get_seconds_spent_on_current_domain_in_current_session, out$ =  true && exports || this;
moment = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
prelude = __webpack_require__(/*! prelude-ls */ "./node_modules/prelude-ls/lib/index.js");
ref$ = __webpack_require__(/*! libs_common/db_utils */ "./src/generated_libs/libs_frontend/db_utils.js"), getkey_dictdict = ref$.getkey_dictdict, getdict_for_key_dictdict = ref$.getdict_for_key_dictdict, getdict_for_key2_dictdict = ref$.getdict_for_key2_dictdict, getCollection = ref$.getCollection, setkey_dict = ref$.setkey_dict, getkey_dict = ref$.getkey_dict;
url_to_domain = __webpack_require__(/*! libs_common/domain_utils */ "./src/libs_common/domain_utils.ls").url_to_domain;
get_days_since_epoch = __webpack_require__(/*! libs_common/time_utils */ "./src/libs_common/time_utils.ls").get_days_since_epoch;
get_session_id = __webpack_require__(/*! libs_common/intervention_info */ "./src/libs_common/intervention_info.ls").get_session_id;
ref$ = __webpack_require__(/*! libs_common/gexport */ "./src/libs_common/gexport.ls"), gexport = ref$.gexport, gexport_module = ref$.gexport_module;
out$.get_seconds_spent_on_all_domains_today = get_seconds_spent_on_all_domains_today = async function(){
  return (await getdict_for_key2_dictdict('seconds_on_domain_per_day', get_days_since_epoch()));
};
out$.get_seconds_spent_on_all_domains_days_before_today = get_seconds_spent_on_all_domains_days_before_today = async function(days_ago){
  return (await getdict_for_key2_dictdict('seconds_on_domain_per_day', get_days_since_epoch() - days_ago));
};
out$.get_seconds_spent_on_domain_all_days = get_seconds_spent_on_domain_all_days = async function(domain){
  var results, today_day_num, output, k, v;
  results = (await getdict_for_key_dictdict('seconds_on_domain_per_day', domain));
  today_day_num = get_days_since_epoch();
  output = {};
  for (k in results) {
    v = results[k];
    output[today_day_num - k] = v;
  }
  return output;
};
out$.get_seconds_spent_on_domain_days_before_today = get_seconds_spent_on_domain_days_before_today = async function(domain, days_ago){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('seconds_on_domain_per_day', domain, current_day - days_ago));
  return result != null ? result : 0;
};
out$.get_seconds_spent_on_domain_today = get_seconds_spent_on_domain_today = async function(domain){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('seconds_on_domain_per_day', domain, current_day));
  return result != null ? result : 0;
};
out$.get_minutes_spent_on_domain_today = get_minutes_spent_on_domain_today = async function(domain){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('seconds_on_domain_per_day', domain, current_day));
  if (result != null) {
    return Math.floor(result / 60.0);
  }
  return 0;
};
/**
* Return seconds spent on current domain today
* @return {integer} seconds spent
*/
out$.get_seconds_spent_on_current_domain_today = get_seconds_spent_on_current_domain_today = async function(){
  var current_domain, result;
  current_domain = window.location.host;
  result = (await get_seconds_spent_on_domain_today(current_domain));
  return result != null ? result : 0;
};
/**
* Return visits to the given domain today
* @param {domain} the doain
* @return {integer} seconds spent
*/
out$.get_visits_to_domain_today = get_visits_to_domain_today = async function(domain){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('visits_to_domain_per_day', domain, current_day));
  return result != null ? result : 0;
};
out$.get_visits_to_domain_days_before_today = get_visits_to_domain_days_before_today = async function(domain, days_ago){
  var current_day, result;
  current_day = get_days_since_epoch();
  result = (await getkey_dictdict('visits_to_domain_per_day', domain, current_day - days_ago));
  return result != null ? result : 0;
};
/**
* Return visits to the given domain today
* @return {integer} seconds spent
*/
out$.get_visits_to_current_domain_today = get_visits_to_current_domain_today = async function(){
  var current_domain, result;
  current_domain = window.location.host;
  result = (await get_visits_to_domain_today(current_domain));
  return result != null ? result : 0;
};
/*
export get_new_session_id_for_domain = (domain) ->>
  collection = await getCollection('seconds_on_domain_per_session')
  all_session_ids_for_domain = await collection.where('key').equals(domain).toArray()
  all_session_ids_for_domain = all_session_ids_for_domain.map (.key2)
  if all_session_ids_for_domain.length == 0
    return 0
  return prelude.maximum(all_session_ids_for_domain) + 1 # this is the day, in epoch time, that the most recent intervention set occurred
*/
out$.get_new_session_id_for_domain = get_new_session_id_for_domain = async function(domain){
  var result;
  result = (await getkey_dict('domain_to_last_session_id', domain));
  if (result == null) {
    (await setkey_dict('domain_to_last_session_id', domain, 0));
    return 0;
  }
  (await setkey_dict('domain_to_last_session_id', domain, result + 1));
  return result + 1;
};
out$.get_seconds_spent_on_current_domain_in_session = get_seconds_spent_on_current_domain_in_session = async function(session_id){
  var current_domain, result;
  current_domain = window.location.host;
  result = (await get_seconds_spent_on_domain_in_session(current_domain, session_id));
  return result != null ? result : 0;
};
out$.get_seconds_spent_on_domain_in_session = get_seconds_spent_on_domain_in_session = async function(domain, session_id){
  var result;
  result = (await getkey_dictdict('seconds_on_domain_per_session', domain, session_id));
  return result != null ? result : 0;
};
/**
* Return seconds spent on current domain this session
* @return {integer} seconds spent
*/
out$.get_seconds_spent_on_current_domain_in_current_session = get_seconds_spent_on_current_domain_in_current_session = async function(){
  var session_id, current_domain, result;
  session_id = get_session_id();
  current_domain = window.location.host;
  result = (await get_seconds_spent_on_domain_in_session(current_domain, session_id));
  return result != null ? result : 0;
};
gexport_module('time_spent_utils', function(it){
  return eval(it);
});
//# sourceMappingURL=time_spent_utils.ls.map


/***/ }),

/***/ "./src/libs_common/time_utils.ls":
/*!***************************************!*\
  !*** ./src/libs_common/time_utils.ls ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var moment, ref$, gexport, gexport_module, get_days_since_epoch, pad_to_two_digits, printable_time_spent_short, printable_time_spent, printable_time_spent_long, out$ =  true && exports || this;
moment = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
ref$ = __webpack_require__(/*! libs_common/gexport */ "./src/libs_common/gexport.ls"), gexport = ref$.gexport, gexport_module = ref$.gexport_module;
out$.get_days_since_epoch = get_days_since_epoch = function(){
  var start_of_epoch;
  start_of_epoch = moment().year(2016).month(0).date(1).hours(0).minutes(0).seconds(0).milliseconds(0);
  return moment().diff(start_of_epoch, 'days');
};
pad_to_two_digits = function(val){
  var output;
  output = val.toString();
  if (output.length === 1) {
    return '0' + output;
  }
  return output;
};
out$.printable_time_spent_short = printable_time_spent_short = function(seconds){
  var minutes;
  if (seconds < 0) {
    return '00:00';
  }
  minutes = Math.floor(seconds / 60);
  seconds = seconds - minutes * 60;
  return minutes + ':' + pad_to_two_digits(seconds);
};
out$.printable_time_spent = printable_time_spent = function(seconds){
  if (seconds < 60) {
    return seconds + ' seconds';
  }
  return moment().add(seconds, 'seconds').fromNow(true);
};
/**
* Return time spent in hours, minutes, seconds format
* @param {Integer} seconds - seconds spent
* @return {String} 
*/
out$.printable_time_spent_long = printable_time_spent_long = function(seconds){
  var hours, remaining_seconds, minutes, output;
  if (seconds < 0) {
    return '0 seconds';
  }
  hours = Math.floor(seconds / 3600);
  remaining_seconds = seconds - hours * 3600;
  minutes = Math.floor(remaining_seconds / 60);
  remaining_seconds = remaining_seconds - minutes * 60;
  output = [];
  if (hours > 0) {
    if (hours === 1) {
      output.push('1 hour');
    } else {
      output.push(hours + ' hours');
    }
  }
  if (minutes > 0 || hours > 0) {
    if (minutes === 1) {
      output.push('1 minute');
    } else {
      output.push(minutes + ' minutes');
    }
  }
  if (remaining_seconds === 1) {
    output.push('1 second');
  } else if (remaining_seconds >= 0) {
    output.push(remaining_seconds + ' seconds');
  }
  return output.join(' ');
};
gexport_module('time_utils', function(it){
  return eval(it);
});
//# sourceMappingURL=time_utils.ls.map


/***/ })

}]);